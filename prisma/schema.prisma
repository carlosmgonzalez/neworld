generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id          Int     @id @default(autoincrement())
  /// Clave única para identificar el parámetro de configuración (ej: "precio_envio_estandar").
  configKey   String  @unique
  /// El valor del parámetro de configuración (ej: "5.99").
  value       String
  /// Tipo de dato del valor (ej: "decimal", "string", "boolean"). Útil para parsear el valor.
  type        String
  /// Descripción del parámetro para entender su propósito.
  description String?
}

model Product {
  id               String   @id @default(uuid())
  name             String
  description      String
  smallDescription String
  price            Float
  stock            Int
  images           String[]
  infoImages       String[]

  linkML  String?
  priceML Float?

  isActive    Boolean  @default(true)
  soldCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  priority    Int      @default(9999)
  higherPrice Float?

  Review            Review[]
  ProductImages     ProductImages[]
  ProductInfoImages ProductInfoImages[]
  CartItem          CartItem[]
}

model ProductImages {
  id        String  @id @default(uuid())
  url       String
  fileKey   String
  productId String
  position  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductInfoImages {
  id        String  @id @default(uuid())
  url       String
  fileKey   String
  productId String
  position  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  name      String
  rating    Int
  comment   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id         String @id @default(uuid())
  totalItems Int
  totalPrice Float
  name       String
  lastname   String
  email      String
  address    String
  locality   String @default("no incluido") @db.VarChar(255)
  province   String
  zipCode    String
  phone      String
  dni        String

  byTransfer Boolean @default(false)
  active     Boolean @default(true)

  status OrderStatus @default(PENDING)
  paid   Boolean     @default(false)
  paidAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  OrderItem OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  productId String
  quantity  Int
  price     Float
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Province {
  id         Int        @id
  province   String     @db.VarChar(255)
  localities Locality[]

  @@map("Provinces")
}

model Locality {
  id          Int      @id
  id_province Int
  locality    String   @db.VarChar(255)
  province    Province @relation(fields: [id_province], references: [id])

  @@map("Localities")
}

model Coupon {
  id                    String       @id @default(uuid())
  code                  String       @unique
  discountValue         Decimal      @db.Decimal(10, 2)
  minimumPurchaseAmount Int
  active                Boolean      @default(true)
  startDate             DateTime     @default(now())
  expirationDate        DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  discountType          DiscountType @default(PERCENTAGE)
  Order                 Order[]
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]

  @@map("user")
}

model Session {
  id        String    @id @default(uuid())
  expiresAt DateTime
  token     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ipAddress String?
  userAgent String?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Cart      Cart?
  UserInfo  UserInfo?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?    @unique
  session   Session?   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model UserInfo {
  id       String @id @default(uuid())
  name     String
  lastname String
  email    String
  address  String
  locality String
  province String
  zipCode  String
  phone    String
  dni      String

  sessionId String?  @unique
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model UserAccount {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  PACKING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum Role {
  ADMIN
  USER
}

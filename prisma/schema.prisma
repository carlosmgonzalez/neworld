// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Config {
  id          Int     @id @default(autoincrement())
  /// Clave única para identificar el parámetro de configuración (ej: "precio_envio_estandar").
  configKey   String  @unique
  /// El valor del parámetro de configuración (ej: "5.99").
  value       String
  /// Tipo de dato del valor (ej: "decimal", "string", "boolean"). Útil para parsear el valor.
  type        String
  /// Descripción del parámetro para entender su propósito.
  description String? // Campo opcional
}

model Product {
  id               String @id @default(uuid())
  name             String
  description      String
  smallDescription String

  price       Float
  higherPrice Float?

  stock      Int
  images     String[]
  infoImages String[]
  isActive   Boolean  @default(true)
  soldCount  Int      @default(0)

  priority Int @default(9999)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Review Review[]
}

model Review {
  id      String @id @default(uuid())
  name    String
  rating  Int
  comment String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  PACKING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id         String  @id @default(uuid())
  totalItems Int
  totalPrice Float
  byTransfer Boolean @default(false)

  name     String
  lastname String
  email    String
  province String
  address  String
  locality String @default("no incluido")
  zipCode  String
  phone    String
  dni      String

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  status OrderStatus @default(PENDING)
  paid   Boolean     @default(false)
  paidAt DateTime?

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  productId String
  quantity  Int
  price     Float

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model Province {
  id         Int        @id // No @default(autoincrement()) si los IDs son predefinidos y no generados por la BD
  province   String     @db.VarChar(255) // Mapea a varchar(255)
  localities Locality[]

  // Mapea al nombre de tabla "Provinces"
  @@map("Provinces")
}

model Locality {
  id          Int      @id // No @default(autoincrement()) si los IDs son predefinidos
  id_province Int
  locality    String   @db.VarChar(255) // Asumiendo que también quieres un límite, o simplemente String para TEXT
  province    Province @relation(fields: [id_province], references: [id])

  // Mapea al nombre de tabla "Localities"
  @@map("Localities")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model Coupon {
  id                    String       @id @default(uuid())
  code                  String       @unique
  discountType          DiscountType @default(PERCENTAGE)
  discountValue         Decimal      @db.Decimal(10, 2)
  minimumPurchaseAmount Int
  active                Boolean      @default(true)

  startDate      DateTime  @default(now())
  expirationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
